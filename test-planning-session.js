#!/usr/bin/env node

import fetch from 'node-fetch';

async function testPlanningAuth() {
  console.log('üîß Test complet session + planning...\n');
  
  try {
    // 1. Test de connexion
    console.log('1Ô∏è‚É£ Test de connexion salon...');
    const loginResponse = await fetch('http://localhost:3000/api/test-login-salon', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ salonOwnerId: '47b38fc8-a9d5-4253-9618-08e81963af42' })
    });
    
    const loginData = await loginResponse.json();
    console.log('‚úÖ Login response:', loginData);
    
    // R√©cup√©ration des cookies
    const cookies = loginResponse.headers.get('set-cookie');
    console.log('üç™ Cookies:', cookies);
    
    if (!cookies) {
      console.error('‚ùå Pas de cookies de session re√ßus');
      return;
    }
    
    // 2. Test de v√©rification de session
    console.log('\n2Ô∏è‚É£ Test de v√©rification session...');
    const whoamiResponse = await fetch('http://localhost:3000/api/test-whoami', {
      headers: { 'Cookie': cookies }
    });
    
    const whoamiData = await whoamiResponse.json();
    console.log('‚úÖ Whoami response:', whoamiData);
    
    // 3. Test de r√©cup√©ration des rendez-vous
    console.log('\n3Ô∏è‚É£ Test API appointments...');
    const appointmentsResponse = await fetch('http://localhost:3000/api/appointments', {
      headers: { 'Cookie': cookies }
    });
    
    if (appointmentsResponse.ok) {
      const appointments = await appointmentsResponse.json();
      console.log(`‚úÖ Rendez-vous r√©cup√©r√©s: ${appointments.length}`);
      
      if (appointments.length > 0) {
        console.log('üìã Premier rendez-vous:');
        console.log(JSON.stringify(appointments[0], null, 2));
      } else {
        console.log('‚ÑπÔ∏è Aucun rendez-vous trouv√©');
      }
    } else {
      console.error(`‚ùå Erreur API appointments: ${appointmentsResponse.status}`);
      const errorText = await appointmentsResponse.text();
      console.error('Details:', errorText);
    }
    
    // 4. Test sans authentification
    console.log('\n4Ô∏è‚É£ Test sans authentification (doit √©chouer)...');
    const noAuthResponse = await fetch('http://localhost:3000/api/appointments');
    console.log(`Status sans auth: ${noAuthResponse.status}`);
    const noAuthText = await noAuthResponse.text();
    console.log('R√©ponse sans auth:', noAuthText);
    
  } catch (error) {
    console.error('‚ùå Erreur durant le test:', error.message);
  }
}

testPlanningAuth();