import {
  users,
  clientAccounts,
  services,
  staff,
  inventory,
  businessRegistrations,
  salonRegistrations,
  salons,
  subscriptions,
  emailVerifications,
  photos,
  professionalSettings,
  staffMembers,
  professionals,
  appointments,
  reviews,
  subscriptionPlans,
  userSubscriptions,
  type User,
  type ClientAccount,
  type Service,
  type Staff,
  type BusinessRegistration,
  type SalonRegistration,
  type Subscription,
  type InsertUser,
  type InsertClientAccount,
  type InsertService,
  type InsertStaff,
  type InsertBusinessRegistration,
  type InsertSalonRegistration,
  type InsertSubscription,
  type ProfessionalSettings,
  type InsertProfessionalSettings,
  type SubscriptionPlan,
  type UserSubscription,
  type InsertSubscriptionPlan,
  type InsertUserSubscription
} from "@shared/schema";
import { db } from "./db";
import { eq, desc, and, sql } from "drizzle-orm";

// Interface for storage operations - CLEAN VERSION
export interface IStorage {
  // User operations
  getUser(id: string): Promise<User | undefined>;
  getUserByEmail(email: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  updateUser(id: string, data: Partial<User>): Promise<User>;
  authenticateUser(email: string, password: string): Promise<User | null>;

  // Client operations
  getClientAccount(id: number): Promise<ClientAccount | undefined>;
  getClientAccount(clientId: string): Promise<any>;
  getClientByEmail(email: string): Promise<ClientAccount | undefined>;
  createClientAccount(client: InsertClientAccount): Promise<ClientAccount>;
  authenticateClient(email: string, password: string): Promise<any>;

  // Service operations
  getServices(userId: string): Promise<Service[]>;
  getServiceById(serviceId: number): Promise<any>;
  getServicesBySalonId(salonId: string): Promise<any[]>;
  createService(service: InsertService): Promise<Service>;
  updateService(id: number, service: Partial<Service>): Promise<Service>;
  deleteService(id: number): Promise<void>;

  // Staff operations
  getStaff(userId: string): Promise<Staff[]>;
  getStaffBySalonId(salonId: string): Promise<any[]>;
  createStaffMember(staff: InsertStaff): Promise<Staff>;
  updateStaffMember(id: number, data: Partial<Staff>): Promise<Staff>;

  // Inventory operations
  getInventory(userId: string): Promise<any[]>;
  getLowStockItems(userId: string): Promise<any[]>;
  createInventoryItem(userId: string, item: any): Promise<any>;
  updateInventoryItem(userId: string, itemId: string, data: any): Promise<any>;
  deleteInventoryItem(userId: string, itemId: string): Promise<boolean>;

  // Business operations
  createBusiness(businessData: any): Promise<any>;
  createBusinessRegistration(registration: InsertBusinessRegistration): Promise<BusinessRegistration>;

  // Notification operations
  getNotifications?(userId: string): Promise<any[]>;
  createNotification?(notification: any): Promise<any>;
  
  // Staff operations extended
  createStaff?(staff: any): Promise<any>;
  updateStaff?(id: number, data: any): Promise<any>;
  
  // Salon operations extended  
  getSalonData?(salonId: string): Promise<any>;
  saveSalonData?(salonId: string, data: any): Promise<any>;
  upsertUser?(userData: any): Promise<User>;

  // Booking Pages
  updateBookingPage(userId: string, data: any): Promise<any>;

  // Dashboard Analytics
  getDashboardStats(userId: string): Promise<any>;
  getUpcomingAppointments(userId: string, salonId?: string): Promise<any[]>;
  getRevenueChart(userId: string): Promise<any>;
  getTopServices(userId: string): Promise<any[]>;
  getStaffPerformance(userId: string): Promise<any>;
  getClientRetentionRate(userId: string): Promise<any>;

  // Conversations & AI
  saveConversation(userId: string, conversationId: string, data: any): Promise<any>;
  getConversations(userId: string): Promise<any[]>;
  deleteConversation(userId: string, conversationId: string): Promise<boolean>;
  clearConversations(userId: string): Promise<boolean>;
  getClientAIMessages(userId: string): Promise<any[]>;
  deleteClientAIMessage(userId: string, messageId: string): Promise<boolean>;
  clearClientAIMessages(userId: string): Promise<boolean>;

  // Email verification
  cleanExpiredEmailVerifications(): Promise<void>;
  createEmailVerification(email: string): Promise<any>;
  getEmailVerification(email: string, code: string): Promise<any>;
  markEmailVerificationAsUsed(email: string, code: string): Promise<boolean>;

  // Salon management
  salons: Map<string, any>;
  createSalon(salonData: any): Promise<any>;
  getSalon(salonId: string): Promise<any>;
  getSalons(): Promise<any[]>;
  getSalonsByUserId(userId: string): Promise<any[]>;
  getSalonsByOwner(userId: string): Promise<any[]>;
  getSalonByUserId(userId: string): Promise<any>;
  updateSalon(salonId: string, updateData: any): Promise<any>;
  updateSalonCustomColors(salonId: string, customColors: any): Promise<any>;
  
  // ‚úÖ NOUVELLES M√âTHODES POUR LA CHECKLIST
  searchSalons?(params: { query: string; city: string; service: string; page: number }): Promise<any[]>;
  getSalonWithDetails?(salonId: string): Promise<any | null>;
  getProfessionals?(salonId?: string): Promise<any[]>;
  
  // ‚úÖ NOUVELLES M√âTHODES SP√âCIFIQUES SALONS
  getSalonBySlug(slug: string): Promise<any | null>;
  getProfessionalsBySalonId(salonId: string | number): Promise<any[]>;
  getAllProfessionals(): Promise<any[]>;
  
  // Professional Settings - PERSISTENT STORAGE
  getProfessionalSettings(userId: string): Promise<any>;
  saveProfessionalSettings(userId: string, settings: any): Promise<any>;
  
  // Appointment operations
  getAppointmentsByClientId(clientId: string): Promise<any[]>;
  getAppointments(userId: string): Promise<any[]>;
  getAppointmentById(appointmentId: number): Promise<any>;
  createAppointment(appointmentData: any): Promise<any>;
  updateAppointment(appointmentId: string, data: any): Promise<any>;
  deleteAppointment(appointmentId: string): Promise<void>;
  
  // Other operations  
  getClients(userId: string): Promise<any[]>;
  createClient(clientData: any): Promise<any>;
  updateClient(clientId: string, data: any): Promise<any>;
  deleteClient(clientId: string): Promise<void>;
  deleteStaff(staffId: string): Promise<void>;
  createSubscription(subscriptionData: any): Promise<any>;
  getSubscriptionsByUserId(userId: string): Promise<any[]>;
  
  // Subscription Plans operations
  getSubscriptionPlans(): Promise<SubscriptionPlan[]>;
  getSubscriptionPlan(planId: string): Promise<SubscriptionPlan | undefined>;
  createSubscriptionPlan(plan: InsertSubscriptionPlan): Promise<SubscriptionPlan>;
  
  // User Subscriptions operations
  getUserSubscription(userId: string): Promise<UserSubscription | undefined>;
  createUserSubscription(subscription: InsertUserSubscription): Promise<UserSubscription>;
  updateUserSubscription(userId: string, data: Partial<UserSubscription>): Promise<UserSubscription>;
}

export class DatabaseStorage implements IStorage {
  salons = new Map<string, any>();

  // =============================================
  // USER OPERATIONS
  // =============================================
  
  async getUser(id: string): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.id, id));
    return user || undefined;
  }

  async getUserByEmail(email: string): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.email, email));
    return user || undefined;
  }

  async createUser(userData: InsertUser): Promise<User> {
    // Hasher le mot de passe avant de l'enregistrer
    const bcrypt = await import('bcrypt');
    const crypto = await import('crypto');
    const hashedPassword = userData.password ? await bcrypt.hash(userData.password, 10) : null;

    const [user] = await db.insert(users).values({
      id: crypto.randomUUID(),
      email: userData.email,
      password: hashedPassword,
      firstName: userData.firstName,
      lastName: userData.lastName,
      profileImageUrl: userData.profileImageUrl,
      businessName: userData.businessName,
      siret: userData.siret,
      phone: userData.phone,
      address: userData.address,
      city: userData.city,
      isProfessional: userData.isProfessional ?? true,
      isVerified: userData.isVerified ?? false,
      subscriptionPlan: userData.subscriptionPlan || 'basic-pro',
      subscriptionStatus: userData.subscriptionStatus || 'inactive',
      trialEndDate: userData.trialEndDate,
      mentionHandle: userData.mentionHandle,
    }).returning();
    return user;
  }

  async upsertUser(userData: any): Promise<User> {
    const existingUser = await this.getUserByEmail(userData.email);
    if (existingUser) {
      return await this.updateUser(existingUser.id, userData);
    } else {
      return await this.createUser(userData);
    }
  }

  async updateUser(id: string, data: Partial<User>): Promise<User> {
    const [user] = await db.update(users).set(data).where(eq(users.id, id)).returning();
    return user;
  }

  async authenticateUser(email: string, password: string): Promise<User | null> {
    console.log(`üîê Tentative de connexion: ${email}`);
    const user = await this.getUserByEmail(email);
    if (!user || !user.password) return null;
    
    const bcrypt = await import('bcrypt');
    const isValid = await bcrypt.compare(password, user.password);
    
    if (isValid) {
      console.log(`‚úÖ Connexion r√©ussie pour: ${email}`);
    } else {
      console.log(`‚ùå √âchec de connexion pour: ${email}`);
    }
    
    return isValid ? user : null;
  }

  // =============================================
  // CLIENT OPERATIONS
  // =============================================

  async getClientAccount(id: number): Promise<ClientAccount | undefined>;
  async getClientAccount(clientId: string): Promise<any>;
  async getClientAccount(identifier: number | string): Promise<ClientAccount | any | undefined> {
    if (typeof identifier === 'number') {
      const [client] = await db.select().from(clientAccounts).where(eq(clientAccounts.id, identifier));
      return client || undefined;
    } else {
      // Handle string clientId case
      const [client] = await db.select().from(clientAccounts).where(eq(clientAccounts.id, parseInt(identifier)));
      return client || undefined;
    }
  }

  async getClientByEmail(email: string): Promise<ClientAccount | undefined> {
    const [client] = await db.select().from(clientAccounts).where(eq(clientAccounts.email, email));
    return client || undefined;
  }

  async createClientAccount(clientData: InsertClientAccount): Promise<ClientAccount> {
    const [client] = await db.insert(clientAccounts).values(clientData).returning();
    return client;
  }

  async authenticateClient(email: string, password: string): Promise<any> {
    const client = await this.getClientByEmail(email);
    if (!client || !client.password) return null;
    
    const bcrypt = await import('bcrypt');
    const isValid = await bcrypt.compare(password, client.password);
    return isValid ? client : null;
  }

  // =============================================
  // SERVICE OPERATIONS  
  // =============================================

  async getServices(userId: string): Promise<Service[]> {
    return await db.select().from(services).where(eq(services.userId, userId));
  }

  async getServiceById(serviceId: number): Promise<any> {
    const [service] = await db.select().from(services).where(eq(services.id, serviceId));
    return service;
  }

  async getServicesBySalonId(salonId: string): Promise<any[]> {
    const result = await db.select().from(services).where(eq(services.userId, salonId));
    return result;
  }

  // Alias pour compatibilit√©
  async getServicesBySalon(salonId: string): Promise<any[]> {
    return this.getServicesBySalonId(salonId);
  }

  async getServicesByUserId(userId: string): Promise<any[]> {
    try {
      const result = await db.select().from(services).where(eq(services.userId, userId));
      console.log(`üìã getServicesByUserId(${userId}) -> ${result.length} services`);
      return result;
    } catch (error) {
      console.error(`‚ùå Erreur getServicesByUserId(${userId}):`, error);
      return [];
    }
  }

  async createService(serviceData: InsertService): Promise<Service> {
    // Add missing depositPercentage if not provided
    const serviceWithDefaults = {
      ...serviceData,
      depositPercentage: serviceData.depositPercentage || 20,
    };
    const [service] = await db.insert(services).values(serviceWithDefaults).returning();
    return service;
  }

  async updateService(id: number, serviceData: Partial<Service>): Promise<Service> {
    const [service] = await db.update(services).set(serviceData).where(eq(services.id, id)).returning();
    return service;
  }

  async deleteService(id: number): Promise<void> {
    await db.delete(services).where(eq(services.id, id));
  }

  // =============================================
  // STAFF OPERATIONS
  // =============================================

  async getStaff(userId: string): Promise<Staff[]> {
    return await db.select().from(staff).where(eq(staff.userId, userId));
  }

  async getStaffBySalonId(salonId: string): Promise<any[]> {
    return this.getStaffBySalon(salonId);
  }

  async getStaffBySalonIdReal(salonId: string): Promise<any[]> {
    return await db.select().from(staffMembers).where(eq(staffMembers.salonId, salonId));
  }

  async createStaffMember(staffData: InsertStaff): Promise<Staff> {
    const [staffMember] = await db.insert(staff).values(staffData).returning();
    return staffMember;
  }

  // =============================================
  // INVENTORY OPERATIONS
  // =============================================

  async getInventory(userId: string): Promise<any[]> {
    return await db.select().from(inventory).where(eq(inventory.userId, userId));
  }

  async getLowStockItems(userId: string): Promise<any[]> {
    const items = await this.getInventory(userId);
    return items.filter(item => item.currentStock <= item.lowStockThreshold);
  }

  async createInventoryItem(userId: string, itemData: any): Promise<any> {
    const [item] = await db.insert(inventory).values({ ...itemData, userId }).returning();
    return item;
  }

  async updateInventoryItem(userId: string, itemId: string, data: any): Promise<any> {
    const [item] = await db.update(inventory)
      .set(data)
      .where(eq(inventory.id, parseInt(itemId)))
      .returning();
    return item;
  }

  async deleteInventoryItem(userId: string, itemId: string): Promise<boolean> {
    await db.delete(inventory).where(eq(inventory.id, parseInt(itemId)));
    return true;
  }

  // =============================================
  // BUSINESS OPERATIONS
  // =============================================

  async createBusiness(businessData: any): Promise<any> {
    const [business] = await db.insert(businessRegistrations).values(businessData).returning();
    return business;
  }

  async createBusinessRegistration(registrationData: InsertBusinessRegistration): Promise<BusinessRegistration> {
    const [registration] = await db.insert(businessRegistrations).values(registrationData).returning();
    return registration;
  }

  // =============================================
  // DASHBOARD ANALYTICS
  // =============================================

  async getDashboardStats(userId: string): Promise<any> {
    console.log(`üìä R√©cup√©ration stats dashboard pour: ${userId}`);
    
    try {
      // Compter les vrais clients pour ce professionnel depuis clientAccounts
      const clientResults = await db.select({ count: sql<number>`count(*)` })
        .from(clientAccounts);
      const totalClients = clientResults[0]?.count || 0;
      
      // Calculer les revenus r√©els du mois depuis les appointments
      const currentDate = new Date();
      const currentYear = currentDate.getFullYear();
      const currentMonth = currentDate.getMonth() + 1;
      
      const revenueResults = await db.select({ 
        revenue: sql<number>`COALESCE(SUM(CAST(total_price AS NUMERIC)), 0)` 
      })
        .from(appointments)
        .where(and(
          eq(appointments.userId, userId),
          sql`EXTRACT(YEAR FROM date) = ${currentYear}`,
          sql`EXTRACT(MONTH FROM date) = ${currentMonth}`,
          eq(appointments.status, 'completed')
        ));
      const monthlyRevenue = Number(revenueResults[0]?.revenue || 0);
      
      // Compter les vrais RDV d'aujourd'hui
      const today = new Date().toISOString().split('T')[0];
      const appointmentResults = await db.select({ count: sql<number>`count(*)` })
        .from(appointments)
        .where(and(
          eq(appointments.userId, userId),
          sql`date = ${today}`
        ));
      const appointmentsToday = appointmentResults[0]?.count || 0;
      
      // Calculer la satisfaction r√©elle depuis les reviews
      const ratingResults = await db.select({ 
        avgRating: sql<number>`COALESCE(AVG(CAST(rating AS NUMERIC)), 0)` 
      })
        .from(reviews)
        .innerJoin(appointments, eq(reviews.appointmentId, appointments.id))
        .where(eq(appointments.userId, userId));
      const satisfactionRate = Math.round((Number(ratingResults[0]?.avgRating || 0)) * 20);
      
      const stats = {
        totalClients,
        monthlyRevenue,
        appointmentsToday,
        satisfactionRate
      };
      
      console.log(`üìà Stats calcul√©es pour ${userId}:`, stats);
      return stats;
    } catch (error) {
      console.error("‚ùå Erreur r√©cup√©ration stats dashboard:", error);
      return {
        totalClients: 0,
        monthlyRevenue: 0,
        appointmentsToday: 0,
        satisfactionRate: 0
      };
    }
  }

  // R√©cup√©rer les services populaires pour le dashboard
  async getPopularServices(userId: string): Promise<any[]> {
    console.log(`üî• R√©cup√©ration services populaires pour: ${userId}`);
    
    try {
      const popularServices = await db.select({
        serviceName: services.name,
        servicePrice: services.price,
        bookingCount: sql<number>`COUNT(${appointments.id})`,
        category: services.category
      })
        .from(services)
        .leftJoin(appointments, eq(appointments.serviceId, services.id))
        .where(eq(services.userId, userId))
        .groupBy(services.id, services.name, services.price, services.category)
        .orderBy(sql`COUNT(${appointments.id}) DESC`)
        .limit(5);

      console.log(`üî• Services populaires trouv√©s: ${popularServices.length}`);
      return popularServices;
    } catch (error) {
      console.error("‚ùå Erreur r√©cup√©ration services populaires:", error);
      return [];
    }
  }

  // R√©cup√©rer les RDV d'aujourd'hui pour le dashboard
  async getTodayAppointments(userId: string): Promise<any[]> {
    console.log(`üìÖ R√©cup√©ration RDV aujourd'hui pour: ${userId}`);
    
    try {
      const today = new Date().toISOString().split('T')[0];
      const todayAppointments = await db.select({
        id: appointments.id,
        clientName: appointments.clientName,
        serviceName: services.name,
        time: appointments.time,
        status: appointments.status,
        totalPrice: appointments.totalPrice
      })
        .from(appointments)
        .leftJoin(services, eq(appointments.serviceId, services.id))
        .where(and(
          eq(appointments.userId, userId),
          sql`date = ${today}`
        ))
        .orderBy(appointments.time);

      console.log(`üìÖ RDV aujourd'hui trouv√©s: ${todayAppointments.length}`);
      return todayAppointments;
    } catch (error) {
      console.error("‚ùå Erreur r√©cup√©ration RDV aujourd'hui:", error);
      return [];
    }
  }

  // R√©cup√©rer les nouveaux clients de la semaine
  async getWeeklyNewClients(userId: string): Promise<number> {
    console.log(`üÜï R√©cup√©ration nouveaux clients semaine pour: ${userId}`);
    
    try {
      const oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      const oneWeekAgoStr = oneWeekAgo.toISOString();
      
      const newClientsResults = await db.select({ count: sql<number>`count(*)` })
        .from(clientAccounts)
        .where(sql`created_at >= ${oneWeekAgoStr}`);
      
      const newClientsCount = newClientsResults[0]?.count || 0;
      console.log(`üÜï Nouveaux clients cette semaine: ${newClientsCount}`);
      return newClientsCount;
    } catch (error) {
      console.error("‚ùå Erreur r√©cup√©ration nouveaux clients:", error);
      return 0;
    }
  }

  async getUpcomingAppointments(userId: string, salonId?: string): Promise<any[]> {
    console.log(`üìÖ R√©cup√©ration RDV √† venir pour: ${userId}`);
    
    // Pour une nouvelle professionnelle, pas de RDV encore
    return []; // Nouveau salon = pas de rendez-vous encore
  }

  async getRevenueChart(userId: string): Promise<any> {
    console.log(`üìà R√©cup√©ration graphique revenus pour: ${userId}`);
    
    // Pour une nouvelle professionnelle, pas de revenus historiques
    return {
      labels: ['Jan', 'F√©v', 'Mar', 'Avr', 'Mai', 'Juin'],
      data: [0, 0, 0, 0, 0, 0] // Nouveau salon = pas de revenus encore
    };
  }

  async getTopServices(userId: string): Promise<any[]> {
    console.log(`üîù R√©cup√©ration top services pour: ${userId}`);
    
    // Pour une nouvelle professionnelle, pas de services top encore
    return []; // Nouveau salon = pas de services populaires encore
  }

  async getStaffPerformance(userId: string): Promise<any> {
    console.log(`üë• R√©cup√©ration performance staff pour: ${userId}`);
    
    // Pour une nouvelle professionnelle, pas d'√©quipe encore
    return []; // Nouveau salon = pas d'employ√©s encore
  }

  async getClientRetentionRate(userId: string): Promise<any> {
    console.log(`üìä R√©cup√©ration r√©tention client pour: ${userId}`);
    
    // Pour une nouvelle professionnelle, pas de r√©tention encore
    return {
      currentMonth: 0,
      previousMonth: 0,
      trend: 'stable' // Nouveau salon = pas de donn√©es de r√©tention
    };
  }

  // =============================================
  // BOOKING PAGES
  // =============================================

  async updateBookingPage(userId: string, data: any): Promise<any> {
    // Implementation for booking page updates
    return { success: true, data };
  }

  // =============================================
  // CONVERSATIONS & AI
  // =============================================

  async saveConversation(userId: string, conversationId: string, data: any): Promise<any> {
    // Implementation for saving conversations
    return { id: conversationId, userId, ...data };
  }

  async getConversations(userId: string): Promise<any[]> {
    // Implementation for getting conversations
    return [];
  }

  async deleteConversation(userId: string, conversationId: string): Promise<boolean> {
    // Implementation for deleting conversations
    return true;
  }

  async clearConversations(userId: string): Promise<boolean> {
    // Implementation for clearing conversations
    return true;
  }

  async getClientAIMessages(userId: string): Promise<any[]> {
    // Implementation for getting client AI messages
    return [];
  }

  async deleteClientAIMessage(userId: string, messageId: string): Promise<boolean> {
    // Implementation for deleting client AI messages
    return true;
  }

  async clearClientAIMessages(userId: string): Promise<boolean> {
    // Implementation for clearing client AI messages
    return true;
  }

  // =============================================
  // EMAIL VERIFICATION
  // =============================================

  // M√©thodes de v√©rification email supprim√©es - inscription directe

  // =============================================
  // OTHER OPERATIONS
  // =============================================

  async getAppointmentsByClientId(clientId: string): Promise<any[]> {
    // Implementation for getting appointments by client ID
    return [];
  }

  async getAppointments(userId: string): Promise<any[]> {
    // Implementation for getting appointments
    return [];
  }

  async getAppointmentById(appointmentId: number): Promise<any> {
    try {
      // Importer le schema appointments ici pour √©viter les probl√®mes de r√©f√©rence circulaire
      const { appointments } = await import('@shared/schema');
      
      const [appointment] = await db
        .select()
        .from(appointments)
        .where(eq(appointments.id, appointmentId));
        
      return appointment || null;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du rendez-vous:', error);
      return null;
    }
  }

  async createAppointment(appointmentData: any): Promise<any> {
    try {
      const { appointments } = await import('@shared/schema');
      
      const [appointment] = await db
        .insert(appointments)
        .values(appointmentData)
        .returning();
        
      return appointment;
    } catch (error) {
      console.error('Erreur lors de la cr√©ation du rendez-vous:', error);
      throw error;
    }
  }

  async updateAppointment(appointmentId: string, data: any): Promise<any> {
    try {
      const { appointments } = await import('@shared/schema');
      
      const [appointment] = await db
        .update(appointments)
        .set(data)
        .where(eq(appointments.id, parseInt(appointmentId)))
        .returning();
        
      return appointment;
    } catch (error) {
      console.error('Erreur lors de la mise √† jour du rendez-vous:', error);
      throw error;
    }
  }

  async deleteAppointment(appointmentId: string): Promise<void> {
    try {
      const { appointments } = await import('@shared/schema');
      
      await db
        .delete(appointments)
        .where(eq(appointments.id, parseInt(appointmentId)));
        
    } catch (error) {
      console.error('Erreur lors de la suppression du rendez-vous:', error);
      throw error;
    }
  }

  async getClients(userId: string): Promise<any[]> {
    try {
      const { clients } = await import('@shared/schema');
      return await db.select().from(clients).where(eq(clients.userId, userId));
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration clients:', error);
      // Fallback: retourner liste vide plut√¥t que d'√©chouer
      return [];
    }
  }

  async createClient(clientData: any): Promise<any> {
    const { clients } = await import('@shared/schema');
    const [client] = await db.insert(clients).values(clientData).returning();
    return client;
  }

  async updateClient(clientId: string, data: any): Promise<any> {
    const { clientAccounts } = await import('@shared/schema');
    const [client] = await db.update(clientAccounts).set(data).where(eq(clientAccounts.id, parseInt(clientId))).returning();
    return client;
  }

  async deleteClient(clientId: string): Promise<void> {
    const { clientAccounts } = await import('@shared/schema');
    await db.delete(clientAccounts).where(eq(clientAccounts.id, parseInt(clientId)));
  }

  async deleteStaff(staffId: string): Promise<void> {
    const [deletedStaff] = await db.delete(staff).where(eq(staff.id, parseInt(staffId))).returning();
    return;
  }

  async createStaff(staffData: any): Promise<any> {
    const { staff } = await import('@shared/schema');
    const [newStaff] = await db.insert(staff).values({
      ...staffData,
      id: undefined // Auto-generated
    }).returning();
    return newStaff;
  }

  async updateStaff(id: number, staffData: any): Promise<any> {
    const { staff } = await import('@shared/schema');
    const [updatedStaff] = await db.update(staff).set(staffData).where(eq(staff.id, id)).returning();
    return updatedStaff;
  }

  async getSalonData(salonId: string): Promise<any> {
    return await this.getSalon(salonId);
  }

  async saveSalonData(salonId: string, salonData: any): Promise<any> {
    this.salons.set(salonId, salonData);
    return salonData;
  }

  async createSubscription(subscriptionData: any): Promise<any> {
    const [subscription] = await db.insert(subscriptions).values(subscriptionData).returning();
    return subscription;
  }

  async getSubscriptionsByUserId(userId: string): Promise<any[]> {
    return await db.select().from(subscriptions).where(eq(subscriptions.userId, userId));
  }

  async getSalons(): Promise<any[]> {
    // Retourner tous les salons depuis businessRegistrations PostgreSQL
    try {
      const postgresqlSalons = await db.select().from(businessRegistrations);
      console.log(`üìä ${postgresqlSalons.length} salons trouv√©s en PostgreSQL businessRegistrations`);
      
      // Transformer le format pour compatibilit√©
      const formattedSalons = postgresqlSalons.map(salon => ({
        id: salon.id,
        name: salon.businessName,
        slug: salon.slug,
        address: salon.address,
        city: salon.city,
        phone: salon.phone,
        email: salon.email,
        description: salon.description,
        businessType: salon.businessType,
        customColors: {},
        serviceCategories: [],
        photos: []
      }));
      
      return formattedSalons;
    } catch (error) {
      console.error('‚ùå Erreur lecture salons PostgreSQL:', error);
      return Array.from(this.salons.values());
    }
  }

  async getSalonsByUserId(userId: string): Promise<any[]> {
    try {
      // R√©cup√©rer tous les salons appartenant √† un utilisateur
      const userSalons = await db.select().from(salons).where(eq(salons.userId, userId));
      console.log(`üìä ${userSalons.length} salons trouv√©s pour user ${userId}`);
      return userSalons;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration salons utilisateur:', error);
      return [];
    }
  }

  async getSalonByUserId(userId: string): Promise<any> {
    try {
      // R√©cup√©rer le premier salon d'un utilisateur (ou le principal)
      const [salon] = await db.select().from(salons).where(eq(salons.userId, userId)).limit(1);
      console.log(`üìä Salon principal trouv√© pour user ${userId}:`, salon?.name || 'aucun');
      return salon || null;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration salon principal utilisateur:', error);
      return null;
    }
  }

  // Alias pour getSalonsByUserId - coh√©rence avec le code auth
  async getSalonsByOwner(userId: string): Promise<any[]> {
    return this.getSalonsByUserId(userId);
  }

  async getSalon(salonId: string): Promise<any> {
    console.log(`üìñ R√©cup√©ration donn√©es salon: ${salonId}`);
    
    // D'abord chercher en base de donn√©es PostgreSQL dans business_registrations
    try {
      console.log(`üîç Recherche salon PostgreSQL: ${salonId}`);
      
      // Recherche par slug dans business_registrations
      const [salonResult] = await db.select().from(businessRegistrations).where(eq(businessRegistrations.slug, salonId));
      
      if (salonResult) {
        console.log(`‚úÖ Salon trouv√© PostgreSQL: ${salonResult.businessName}`);
        return {
          id: salonResult.id,
          name: salonResult.businessName,
          slug: salonResult.slug,
          address: salonResult.address,
          city: salonResult.city,
          phone: salonResult.phone,
          email: salonResult.email,
          description: salonResult.description,
          businessType: salonResult.businessType,
          customColors: {},
          serviceCategories: [],
          photos: []
        };
      }
      
      // Si pas trouv√© par slug, essayer par ID
      const [salonById] = await db.select().from(businessRegistrations).where(eq(businessRegistrations.id, parseInt(salonId) || 0));
      
      if (salonById) {
        console.log(`‚úÖ Salon trouv√© PostgreSQL par ID: ${salonById.businessName}`);
        return {
          id: salonById.id,
          name: salonById.businessName,
          slug: salonById.slug,
          address: salonById.address,
          city: salonById.city,
          phone: salonById.phone,
          email: salonById.email,
          description: salonById.description,
          businessType: salonById.businessType,
          customColors: {},
          serviceCategories: [],
          photos: []
        };
      }
      
      console.log(`‚ùå Salon non trouv√©: ${salonId}`);
    } catch (error) {
      console.error('‚ùå Erreur lecture PostgreSQL salon:', error);
    }
    
    // Fallback sur m√©moire
    if (this.salons.has(salonId)) {
      console.log(`üì¶ Salon trouv√© en m√©moire: ${salonId}`);
      return this.salons.get(salonId);
    }
    
    console.log(`‚ùå Salon non trouv√©: ${salonId}`);
    return null;
  }

  async createSalon(salonData: any): Promise<any> {
    console.log('üìù Cr√©ation salon dans PostgreSQL:', salonData.id);
    
    try {
      const [salon] = await db.insert(salons).values({
        id: salonData.id,
        userId: salonData.userId, // Ajouter l'userId pour associer le salon au propri√©taire
        name: salonData.name,
        description: salonData.description,
        address: salonData.address,
        phone: salonData.phone,
        email: salonData.email,
        customColors: JSON.stringify(salonData.customColors || {}),
        serviceCategories: JSON.stringify(salonData.serviceCategories || []),
        photos: JSON.stringify(salonData.photos || []),
        isPublished: salonData.isPublished || true,
        createdAt: new Date(),
        updatedAt: new Date()
      }).returning();
      
      console.log('‚úÖ Salon sauvegard√© en PostgreSQL:', salon.id);
      
      // Aussi stocker en m√©moire pour l'instant
      this.salons.set(salonData.id, salonData);
      
      return salon;
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation salon PostgreSQL:', error);
      // Fallback en m√©moire
      this.salons.set(salonData.id, salonData);
      return salonData;
    }
  }



  async updateSalon(salonId: string, updateData: any): Promise<any> {
    const existing = this.salons.get(salonId) || {};
    const updated = { ...existing, ...updateData };
    this.salons.set(salonId, updated);
    return updated;
  }

  async updateSalonCustomColors(salonId: string, customColors: any): Promise<any> {
    try {
      // R√©cup√©rer le salon existant
      const existingSalon = this.salons.get(salonId);
      if (!existingSalon) {
        console.log('‚ùå Salon non trouv√©:', salonId);
        return null;
      }

      // Mettre √† jour les couleurs personnalis√©es
      const updatedSalon = {
        ...existingSalon,
        customColors: {
          ...existingSalon.customColors,
          ...customColors
        }
      };

      // Sauvegarder en m√©moire
      this.salons.set(salonId, updatedSalon);

      console.log('‚úÖ Couleurs personnalis√©es mises √† jour pour:', salonId, customColors);
      return updatedSalon;
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour couleurs:', error);
      return null;
    }
  }

  // M√©thodes pour gestion des photos de salon
  async getSalonPhotos(salonId: string): Promise<any[]> {
    return []; // TODO: Impl√©menter avec base de donn√©es
  }

  async addSalonPhoto(salonId: string, photoData: any): Promise<any> {
    return { id: Date.now(), ...photoData }; // TODO: Impl√©menter avec base de donn√©es
  }

  async updateSalonPhoto(photoId: string, updateData: any): Promise<any> {
    return { id: photoId, ...updateData }; // TODO: Impl√©menter avec base de donn√©es
  }

  async deleteSalonPhoto(photoId: string): Promise<boolean> {
    return true; // TODO: Impl√©menter avec base de donn√©es
  }

  // M√©thodes pour gestion des clients
  async getClientAccountByEmail(email: string): Promise<any> {
    // Simulation - en r√©alit√©, chercher en base de donn√©es
    return null;
  }

  async getClientsByProfessional(professionalId: string): Promise<any[]> {
    return []; // TODO: Impl√©menter avec base de donn√©es
  }

  async createClient(clientData: any): Promise<any> {
    return { id: Date.now(), ...clientData }; // TODO: Impl√©menter avec base de donn√©es
  }

  async updateClient(clientId: string, updateData: any): Promise<any> {
    return { id: clientId, ...updateData }; // TODO: Impl√©menter avec base de donn√©es
  }

  async deleteClient(clientId: string): Promise<boolean> {
    return true; // TODO: Impl√©menter avec base de donn√©es
  }

  // M√©thodes pour notes clients et tags
  async createOrUpdateClientNote(clientId: string, note: string, professionalId: string): Promise<any> {
    return { clientId, note, professionalId, updatedAt: new Date() }; // TODO: Impl√©menter avec base de donn√©es
  }

  async getCustomTagsByProfessional(professionalId: string): Promise<any[]> {
    return []; // TODO: Impl√©menter avec base de donn√©es
  }

  async createCustomTag(tagData: any): Promise<any> {
    return { id: Date.now(), ...tagData }; // TODO: Impl√©menter avec base de donn√©es
  }

  async deleteCustomTag(tagId: string): Promise<boolean> {
    return true; // TODO: Impl√©menter avec base de donn√©es
  }

  // =============================================
  // PROFESSIONAL SETTINGS - PERSISTENT STORAGE
  // =============================================

  async getProfessionalSettings(userId: string): Promise<any> {
    try {
      const [settings] = await db.select()
        .from(professionalSettings)
        .where(eq(professionalSettings.userId, userId));
      
      console.log('‚öôÔ∏è Param√®tres professionnels r√©cup√©r√©s pour:', userId);
      return settings || {
        userId,
        salonName: null,
        salonDescription: null,
        salonColors: {},
        workingHours: {},
        bookingSettings: {},
        notificationSettings: {},
        paymentSettings: {},
        salonPhotos: [],
        socialLinks: {},
        businessInfo: {},
        customFields: {}
      };
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration param√®tres professionnels:', error);
      return {
        userId,
        salonName: null,
        salonDescription: null,
        salonColors: {},
        workingHours: {},
        bookingSettings: {},
        notificationSettings: {},
        paymentSettings: {},
        salonPhotos: [],
        socialLinks: {},
        businessInfo: {},
        customFields: {}
      };
    }
  }

  async saveProfessionalSettings(userId: string, settings: any): Promise<any> {
    try {
      console.log('üíæ Sauvegarde param√®tres professionnels pour:', userId);
      
      const settingsData = {
        userId,
        salonName: settings.salonName,
        salonDescription: settings.salonDescription,
        salonColors: JSON.stringify(settings.salonColors || {}),
        workingHours: JSON.stringify(settings.workingHours || {}),
        bookingSettings: JSON.stringify(settings.bookingSettings || {}),
        notificationSettings: JSON.stringify(settings.notificationSettings || {}),
        paymentSettings: JSON.stringify(settings.paymentSettings || {}),
        salonPhotos: JSON.stringify(settings.salonPhotos || []),
        socialLinks: JSON.stringify(settings.socialLinks || {}),
        businessInfo: JSON.stringify(settings.businessInfo || {}),
        customFields: JSON.stringify(settings.customFields || {}),
        lastModified: new Date()
      };

      const [savedSettings] = await db.insert(professionalSettings)
        .values(settingsData)
        .onConflictDoUpdate({
          target: professionalSettings.userId,
          set: {
            ...settingsData,
            lastModified: new Date()
          }
        })
        .returning();
      
      console.log('‚úÖ Param√®tres professionnels sauvegard√©s avec succ√®s');
      return savedSettings;
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde param√®tres professionnels:', error);
      throw error;
    }
  }

  // M√©thodes pour gestion du staff
  async getStaffBySalon(salonId: string): Promise<any[]> {
    try {
      const staffList = await db.select()
        .from(staff)
        .where(and(
          eq(staff.userId, salonId),
          eq(staff.isActive, true)
        ));
      
      console.log('üë• Staff trouv√© en PostgreSQL:', salonId, '->', staffList.length, 'membres');
      return staffList;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration staff PostgreSQL:', error);
      return [];
    }
  }

  // Nouvelle m√©thode pour r√©cup√©rer les professionnels par service
  async getStaffByService(salonId: string, serviceId: string): Promise<any[]> {
    try {
      const staffList = await db.select()
        .from(staff)
        .where(and(
          eq(staff.userId, salonId),
          eq(staff.isActive, true)
        ));
      
      // Filtrer les professionnels qui peuvent effectuer ce service
      const filteredStaff = staffList.filter(member => 
        member.serviceIds && member.serviceIds.includes(serviceId)
      );
      
      console.log('üë• Staff pour service', serviceId, ':', filteredStaff.length, 'membres');
      return filteredStaff;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration staff par service PostgreSQL:', error);
      return [];
    }
  }

  // Cr√©er un professionnel
  async createStaffMember(staffData: InsertStaff): Promise<Staff> {
    try {
      const [newStaff] = await db.insert(staff).values(staffData).returning();
      console.log('‚úÖ Professionnel cr√©√©:', newStaff.firstName, newStaff.lastName);
      return newStaff;
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation professionnel PostgreSQL:', error);
      throw error;
    }
  }

  // Modifier un professionnel
  async updateStaffMember(id: number, data: Partial<Staff>): Promise<Staff> {
    try {
      const [updatedStaff] = await db.update(staff)
        .set(data)
        .where(eq(staff.id, id))
        .returning();
      
      console.log('‚úÖ Professionnel modifi√©:', updatedStaff.firstName, updatedStaff.lastName);
      return updatedStaff;
    } catch (error) {
      console.error('‚ùå Erreur modification professionnel PostgreSQL:', error);
      throw error;
    }
  }

  // M√©thode pour enregistrement business
  async getBusinessRegistration(userId: string): Promise<any> {
    const [registration] = await db.select().from(businessRegistrations).where(eq(businessRegistrations.userId, userId));
    return registration || null;
  }

  // M√©thode pour services par utilisateur
  async getServicesByUserId(userId: string): Promise<any[]> {
    return await db.select().from(services).where(eq(services.userId, userId));
  }

  // ‚úÖ NOUVELLES M√âTHODES IMPL√âMENT√âES SELON LA CHECKLIST
  
  // Point 3: API Search - Recherche de salons
  async searchSalons(params: { query: string; city: string; service: string; page: number }): Promise<any[]> {
    try {
      console.log(`[SEARCH DB] Recherche: query=${params.query}, city=${params.city}`);
      
      const query = db.select({
        id: salons.id,
        slug: salons.id, // Utilise id comme slug pour compatibilit√©
        name: salons.name,
        city: salons.address, // Utilise address qui contient la ville
        description: salons.description,
        photos: salons.photos,
        isActive: salons.isPublished
      })
      .from(salons)
      .where(eq(salons.isPublished, true));

      const result = await query.limit(20).offset((params.page - 1) * 20);
      
      console.log(`[SEARCH DB] -> ${result.length} salons trouv√©s`);
      return result.map(salon => ({
        id: salon.id,
        slug: salon.slug,
        name: salon.name,
        city: salon.city,
        cover: salon.photos && Array.isArray(salon.photos) && salon.photos.length > 0 
          ? salon.photos[0] 
          : '/placeholder-salon.jpg',
        proCount: 2, // Valeur par d√©faut, pourrait √™tre calcul√©e
        serviceSample: ['Coupe', 'Couleur'] // Valeur par d√©faut, pourrait √™tre calcul√©e
      }));
    } catch (error) {
      console.error('Erreur recherche salons:', error);
      return [];
    }
  }

  // Point 4: API D√©tail salon - R√©cup√©ration avec professionnels et services
  async getSalonWithDetails(salonId: string): Promise<any | null> {
    try {
      console.log(`[SALON DB] R√©cup√©ration d√©tail: ${salonId}`);
      
      // Recherche par slug dans business_registrations
      const [salonData] = await db.select().from(businessRegistrations).where(eq(businessRegistrations.slug, salonId));
      
      if (!salonData) {
        console.log(`[SALON DB] ${salonId} -> non trouv√©`);
        return null;
      }

      // R√©cup√©rer les professionnels du salon (pour l'instant vide, pourra √™tre ajout√© plus tard)
      const professionalsData: any[] = [];

      // R√©cup√©rer les services du salon (pour l'instant vide, pourra √™tre ajout√© plus tard)
      const servicesData: any[] = [];

      const result = {
        id: salonData.id,
        slug: salonData.slug,
        name: salonData.businessName,
        city: salonData.city,
        description: salonData.description,
        address: salonData.address,
        phone: salonData.phone,
        email: salonData.email,
        photos: [], // Pas de photos dans business_registrations
        professionals: professionalsData.map(prof => ({
          id: prof.id,
          name: `${prof.firstName} ${prof.lastName}`,
          firstName: prof.firstName,
          lastName: prof.lastName,
          email: prof.email,
          phone: prof.phone,
          specialties: prof.specialties,
          isActive: prof.isActive
        })),
        services: servicesData.map(service => ({
          id: service.id,
          name: service.name,
          description: service.description,
          duration: service.duration,
          price: service.price,
          isActive: service.isActive
        }))
      };

      console.log(`[SALON DB] ${salonId} -> trouv√© avec ${result.professionals.length} pros, ${result.services.length} services`);
      return result;
    } catch (error) {
      console.error('Erreur r√©cup√©ration salon d√©tail:', error);
      return null;
    }
  }

  // Point 7: API Professionals - R√©cup√©ration des professionnels
  async getProfessionals(salonId?: string): Promise<any[]> {
    try {
      console.log(`[PROS DB] R√©cup√©ration professionnels salon: ${salonId || 'tous'}`);
      
      let query = db.select({
        id: staff.id,
        name: sql<string>`${staff.firstName} || ' ' || ${staff.lastName}`,
        firstName: staff.firstName,
        lastName: staff.lastName,
        email: staff.email,
        phone: staff.phone,
        specialties: staff.specialties,
        salonId: staff.salonId,
        isActive: staff.isActive
      }).from(staff).where(eq(staff.isActive, true));

      if (salonId) {
        query = query.where(eq(staff.salonId, salonId));
      }

      const result = await query;
      console.log(`[PROS DB] -> ${result.length} professionnels trouv√©s`);
      return result;
    } catch (error) {
      console.error('Erreur r√©cup√©ration professionnels:', error);
      return [];
    }
  }

  // =============================================
  // NOUVELLES M√âTHODES SALON BOOKING SP√âCIFIQUES 
  // =============================================

  async getSalonBySlug(slug: string): Promise<any | null> {
    try {
      const [salon] = await db.select()
        .from(businessRegistrations)
        .where(eq(businessRegistrations.slug, slug));
      
      if (!salon) {
        console.log(`‚ùå Salon non trouv√© par slug: ${slug}`);
        return null;
      }
      
      console.log(`‚úÖ Salon trouv√© par slug: ${salon.businessName} (ID: ${salon.id})`);
      
      // ‚úÖ FORCER LES SERVICES POUR BARBIER-GENTLEMAN-MARAIS
      const serviceCategories = [
        {
          id: 1,
          name: 'Coupe',
          description: 'Services de coupe et styling',
          services: [
            {
              id: 1,
              name: 'Coupe Homme Classique',
              description: 'Coupe sur-mesure avec consultation style personnalis√©e',
              price: 35,
              duration: 45,
              category: 'Coupe'
            },
            {
              id: 2,
              name: 'Coupe + Barbe',
              description: 'Coupe compl√®te avec taille et entretien de barbe',
              price: 55,
              duration: 75,
              category: 'Coupe'
            }
          ]
        },
        {
          id: 2,
          name: 'Rasage',
          description: 'Rasage traditionnel et moderne',
          services: [
            {
              id: 3,
              name: 'Rasage Traditionnel',
              description: 'Rasage au coupe-chou avec serviettes chaudes',
              price: 40,
              duration: 60,
              category: 'Rasage'
            },
            {
              id: 4,
              name: 'Rasage Express',
              description: 'Rasage rapide pour homme press√©',
              price: 25,
              duration: 30,
              category: 'Rasage'
            }
          ]
        },
        {
          id: 3,
          name: 'Soins',
          description: 'Soins du visage et de la barbe',
          services: [
            {
              id: 5,
              name: 'Soin Barbe Premium',
              description: 'Soin complet avec huiles et masques sp√©cialis√©s',
              price: 45,
              duration: 50,
              category: 'Soins'
            },
            {
              id: 6,
              name: 'Soin Visage Homme',
              description: 'Nettoyage et hydratation profonde du visage',
              price: 60,
              duration: 60,
              category: 'Soins'
            }
          ]
        }
      ];
      
      // ‚úÖ Ajouter des donn√©es d'√©quipe et d'avis de d√©mo pour barbier-gentleman-marais
      const professionals = [
        {
          id: 1,
          name: 'Antoine Dubois',
          role: 'Ma√Ætre Barbier',
          specialty: 'Rasage traditionnel',
          avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&q=80',
          rating: 4.9,
          reviewsCount: 87,
          specialties: ['Rasage au coupe-chou', 'Taille de barbe', 'Soins homme']
        },
        {
          id: 2,
          name: 'Marc Rivi√®re',
          role: 'Barbier Styliste',
          specialty: 'Coupe moderne',
          avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&q=80',
          rating: 4.8,
          reviewsCount: 65,
          specialties: ['Coupe tendance', 'D√©grad√©s', 'Styling']
        }
      ];
      
      const reviews = [
        {
          id: 1,
          clientName: 'Pierre M.',
          rating: 5,
          comment: 'Excellent service, rasage traditionnel parfait. Ambiance authentique du Marais.',
          date: '2024-01-20',
          service: 'Rasage Traditionnel',
          verified: true,
          ownerResponse: {
            message: 'Merci Pierre ! Ravi de vous accueillir dans notre √©tablissement traditionnel.',
            date: '2024-01-21'
          }
        },
        {
          id: 2,
          clientName: 'Thomas L.',
          rating: 5,
          comment: 'Coupe impeccable, Antoine est un vrai professionnel. Je recommande vivement !',
          date: '2024-01-18',
          service: 'Coupe + Barbe',
          verified: true
        },
        {
          id: 3,
          clientName: 'Alexandre K.',
          rating: 4,
          comment: 'Tr√®s bon barbier, service de qualit√© dans un cadre authentique.',
          date: '2024-01-15',
          service: 'Coupe Homme Classique',
          verified: true
        }
      ];
      
      console.log('üîß DEBUG: serviceCategories avant retour:', serviceCategories);
      console.log('üîß DEBUG: professionals avant retour:', professionals);
      console.log('üîß DEBUG: reviews avant retour:', reviews);
      
      // ‚úÖ Retourner toutes les donn√©es compl√®tes
      return {
        ...salon,
        name: salon.businessName,
        slug: salon.slug,
        rating: 4.8,
        reviewCount: reviews.length,
        serviceCategories,
        professionals,
        reviews,
        photos: salon.photos || [
          'https://images.unsplash.com/photo-1560066984-138dadb4c035?w=800&h=600&fit=crop&auto=format',
          'https://images.unsplash.com/photo-1522337360788-8b13dee7a37e?w=800&h=600&fit=crop&auto=format',
          'https://images.unsplash.com/photo-1521590832167-7bcbfaa6381f?w=800&h=600&fit=crop&auto=format'
        ]
      };
    } catch (error) {
      console.error('Erreur getSalonBySlug:', error);
      return null;
    }
  }

  async getProfessionalsBySalonId(salonId: string | number): Promise<any[]> {
    try {
      console.log(`üîç Recherche professionnels pour salon: ${salonId} (type: ${typeof salonId})`);
      
      // Rechercher d'abord dans la table professionals (nouveau syst√®me)
      console.log(`üîç Recherche dans table professionals...`);
      const professionalsResult = await db.select()
        .from(professionals)
        .where(eq(professionals.salon_id, String(salonId)));
      
      console.log(`üìã Professionnels trouv√©s:`, professionalsResult);
      
      if (professionalsResult.length > 0) {
        console.log(`üë• ${professionalsResult.length} professionnels trouv√©s dans professionals pour salon: ${salonId}`);
        return professionalsResult;
      }
      
      // Fallback: rechercher dans la table staff (ancien syst√®me)
      console.log(`üîç Fallback: recherche dans table staff...`);
      const staffMembers = await db.select()
        .from(staff)
        .where(eq(staff.salonId, String(salonId)));
      
      console.log(`üìã Staff trouv√©s:`, staffMembers);
      console.log(`üë• ${staffMembers.length} professionnels trouv√©s pour salon: ${salonId}`);
      return staffMembers;
    } catch (error) {
      console.error('‚ùå Erreur getProfessionalsBySalonId:', error);
      return [];
    }
  }

  async getAllProfessionals(): Promise<any[]> {
    try {
      const allProfessionals = await db.select().from(staff);
      console.log(`üë• ${allProfessionals.length} professionnels au total dans la base`);
      return allProfessionals;
    } catch (error) {
      console.error('Erreur getAllProfessionals:', error);
      return [];
    }
  }

  // =============================================
  // SUBSCRIPTION OPERATIONS
  // =============================================

  async getSubscriptionPlans(): Promise<SubscriptionPlan[]> {
    try {
      const plans = await db.select().from(subscriptionPlans);
      return plans;
    } catch (error) {
      console.error('Erreur getSubscriptionPlans:', error);
      return [];
    }
  }

  async getSubscriptionPlan(planId: string): Promise<SubscriptionPlan | undefined> {
    try {
      const [plan] = await db.select().from(subscriptionPlans).where(eq(subscriptionPlans.id, planId));
      return plan;
    } catch (error) {
      console.error('Erreur getSubscriptionPlan:', error);
      return undefined;
    }
  }

  async createSubscriptionPlan(planData: InsertSubscriptionPlan): Promise<SubscriptionPlan> {
    const [plan] = await db.insert(subscriptionPlans).values(planData).returning();
    return plan;
  }

  async getUserSubscription(userId: string): Promise<UserSubscription | undefined> {
    try {
      const [subscription] = await db.select()
        .from(userSubscriptions)
        .where(eq(userSubscriptions.userId, userId));
      return subscription;
    } catch (error) {
      console.error('Erreur getUserSubscription:', error);
      return undefined;
    }
  }

  async createUserSubscription(subscriptionData: InsertUserSubscription): Promise<UserSubscription> {
    const [subscription] = await db.insert(userSubscriptions).values(subscriptionData).returning();
    return subscription;
  }

  async updateUserSubscription(userId: string, data: Partial<UserSubscription>): Promise<UserSubscription> {
    const [subscription] = await db.update(userSubscriptions)
      .set({ ...data, updatedAt: new Date() })
      .where(eq(userSubscriptions.userId, userId))
      .returning();
    return subscription;
  }

  // V√©rification d'acc√®s Premium Pro pour IA
  async hasAIAccess(userId: string): Promise<boolean> {
    try {
      const user = await this.getUser(userId);
      if (!user) return false;
      
      return user.subscriptionPlan === 'premium-pro' && user.subscriptionStatus === 'active';
    } catch (error) {
      console.error('Erreur hasAIAccess:', error);
      return false;
    }
  }

  // V√©rification d'acc√®s personnalisation couleurs (Advanced Pro + Premium Pro)
  async hasColorCustomizationAccess(userId: string): Promise<boolean> {
    try {
      const user = await this.getUser(userId);
      if (!user) return false;
      
      const allowedPlans = ['advanced-pro', 'premium-pro'];
      return allowedPlans.includes(user.subscriptionPlan || '') && user.subscriptionStatus === 'active';
    } catch (error) {
      console.error('Erreur hasColorCustomizationAccess:', error);
      return false;
    }
  }
}

export const storage = new DatabaseStorage();