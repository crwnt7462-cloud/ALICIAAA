import OpenAI from "openai";

// Service IA pour optimisation planning et insights business
class AIService {
  private openai: OpenAI | null = null;
  private isConfigured: boolean;

  constructor() {
    this.isConfigured = !!process.env.OPENAI_API_KEY;
    if (this.isConfigured) {
      this.openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    }
  }

  async optimizeSchedule(appointments: any[], services: any[], staff: any[]): Promise<any> {
    if (!this.isConfigured) {
      console.warn('ü§ñ OpenAI non configur√© - optimisation d√©sactiv√©e');
      return { suggestions: [], optimized: false };
    }

    try {
      const prompt = `
        Analysez ce planning de salon de beaut√© et proposez des optimisations:
        
        Rendez-vous: ${JSON.stringify(appointments)}
        Services: ${JSON.stringify(services)}
        Staff: ${JSON.stringify(staff)}
        
        R√©pondez en JSON avec:
        {
          "suggestions": ["suggestion1", "suggestion2"],
          "conflicts": ["conflit1"],
          "optimization_score": 85,
          "recommended_changes": []
        }
      `;

      const response = await this.openai!.chat.completions.create({
        model: "gpt-4o", // the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
        messages: [{ role: "user", content: prompt }],
        response_format: { type: "json_object" },
      });

      const result = JSON.parse(response.choices[0].message.content || '{}');
      console.log('ü§ñ Planning optimis√© par IA');
      return result;
    } catch (error) {
      console.error('‚ùå Erreur optimisation IA:', error);
      return { suggestions: [], optimized: false };
    }
  }

  async generateBusinessInsights(data: any): Promise<any> {
    if (!this.isConfigured) {
      console.warn('ü§ñ OpenAI non configur√© - insights d√©sactiv√©s');
      return { insights: [], recommendations: [] };
    }

    try {
      const prompt = `
        Analysez ces donn√©es de salon de beaut√© et g√©n√©rez des insights business:
        
        ${JSON.stringify(data)}
        
        R√©pondez en JSON avec:
        {
          "key_insights": ["insight1", "insight2"],
          "recommendations": ["rec1", "rec2"],
          "trends": ["trend1"],
          "alerts": ["alert1"],
          "performance_score": 78
        }
      `;

      const response = await this.openai!.chat.completions.create({
        model: "gpt-4o", // the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
        messages: [{ role: "user", content: prompt }],
        response_format: { type: "json_object" },
      });

      const result = JSON.parse(response.choices[0].message.content || '{}');
      console.log('üìä Insights business g√©n√©r√©s par IA');
      return result;
    } catch (error) {
      console.error('‚ùå Erreur insights IA:', error);
      return { insights: [], recommendations: [] };
    }
  }

  async chatAssistant(userMessage: string, context: any = {}): Promise<string> {
    if (!this.isConfigured) {
      return "Assistant IA non configur√©. Veuillez ajouter votre cl√© OpenAI.";
    }

    try {
      const systemPrompt = `
        Vous √™tes l'assistant IA d'une plateforme de gestion de salon de beaut√©.
        Aidez les professionnels avec des conseils pratiques et des r√©ponses claires.
        
        Contexte utilisateur: ${JSON.stringify(context)}
        
        R√©pondez de mani√®re concise et professionnelle en fran√ßais.
      `;

      const response = await this.openai!.chat.completions.create({
        model: "gpt-4o", // the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userMessage }
        ],
      });

      return response.choices[0].message.content || "D√©sol√©, je n'ai pas pu traiter votre demande.";
    } catch (error) {
      console.error('‚ùå Erreur chat IA:', error);
      return "Une erreur s'est produite. R√©essayez plus tard.";
    }
  }

  async predictDemand(historicalData: any[]): Promise<any> {
    if (!this.isConfigured) {
      return { predictions: [], confidence: 0 };
    }

    try {
      const prompt = `
        Analysez ces donn√©es historiques de salon de beaut√© et pr√©disez la demande:
        
        ${JSON.stringify(historicalData)}
        
        R√©pondez en JSON avec:
        {
          "next_week_predictions": [{"day": "lundi", "predicted_bookings": 12}],
          "peak_hours": ["14:00-16:00"],
          "recommended_promotions": ["promo1"],
          "confidence_score": 85
        }
      `;

      const response = await this.openai!.chat.completions.create({
        model: "gpt-4o", // the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
        messages: [{ role: "user", content: prompt }],
        response_format: { type: "json_object" },
      });

      const result = JSON.parse(response.choices[0].message.content || '{}');
      console.log('üìà Pr√©dictions de demande g√©n√©r√©es');
      return result;
    } catch (error) {
      console.error('‚ùå Erreur pr√©diction IA:', error);
      return { predictions: [], confidence: 0 };
    }
  }

  async analyzeClientBehavior(clientData: any): Promise<any> {
    if (!this.isConfigured) {
      return { analysis: "IA non configur√©e", recommendations: [] };
    }

    try {
      const prompt = `
        Analysez le comportement de ce client de salon de beaut√©:
        
        ${JSON.stringify(clientData)}
        
        R√©pondez en JSON avec:
        {
          "client_type": "fid√®le|occasionnel|nouveau",
          "preferences": ["service1", "service2"],
          "best_contact_time": "14:00-16:00",
          "retention_risk": "faible|moyen|√©lev√©",
          "personalized_offers": ["offre1"]
        }
      `;

      const response = await this.openai!.chat.completions.create({
        model: "gpt-4o", // the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
        messages: [{ role: "user", content: prompt }],
        response_format: { type: "json_object" },
      });

      const result = JSON.parse(response.choices[0].message.content || '{}');
      console.log('üë§ Comportement client analys√©');
      return result;
    } catch (error) {
      console.error('‚ùå Erreur analyse client:', error);
      return { analysis: "Erreur analyse", recommendations: [] };
    }
  }

  // M√âTHODE MANQUANTE - generateResponse pour compatibility avec routes
  async generateResponse(message: string): Promise<string> {
    return await this.chatAssistant(message, {});
  }
}

export const aiService = new AIService();