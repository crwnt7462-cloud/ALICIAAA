export interface BookingConfirmationData {
  appointmentId: number;
  clientEmail: string;
  clientName: string;
  serviceName: string;
  date: string;
  time: string;
  totalPrice: number;
  depositPaid: number;
  businessName: string;
  businessAddress: string;
}

export interface CancellationNotificationData {
  appointmentId: number;
  clientEmail: string;
  clientName: string;
  serviceName: string;
  date: string;
  time: string;
  reason: string;
}

export interface RescheduleNotificationData {
  appointmentId: number;
  clientEmail: string;
  clientName: string;
  serviceName: string;
  oldDate: string;
  oldTime: string;
  newDate: string;
  newTime: string;
}

export class ConfirmationService {
  // Envoyer confirmation de r√©servation par email/SMS
  async sendBookingConfirmation(data: BookingConfirmationData): Promise<boolean> {
    try {
      // Simulation de l'envoi d'email
      console.log(`üìß Email de confirmation envoy√© √† ${data.clientEmail}`);
      console.log(`üìÖ RDV: ${data.serviceName} le ${data.date} √† ${data.time}`);
      console.log(`üí∞ Prix: ${data.totalPrice}‚Ç¨ (acompte: ${data.depositPaid}‚Ç¨)`);
      
      // Simulation SMS (si num√©ro fourni)
      console.log(`üì± SMS de confirmation envoy√©`);
      
      // TODO: Int√©grer SendGrid/Nodemailer pour emails
      // TODO: Int√©grer Twilio pour SMS
      
      return true;
    } catch (error) {
      console.error("Erreur envoi confirmation:", error);
      return false;
    }
  }

  // Notification d'annulation
  async sendCancellationNotification(data: CancellationNotificationData): Promise<boolean> {
    try {
      console.log(`‚ùå Notification d'annulation envoy√©e √† ${data.clientEmail}`);
      console.log(`üìÖ RDV annul√©: ${data.serviceName} le ${data.date} √† ${data.time}`);
      console.log(`‚ÑπÔ∏è Raison: ${data.reason}`);
      
      return true;
    } catch (error) {
      console.error("Erreur notification annulation:", error);
      return false;
    }
  }

  // Notification de report
  async sendRescheduleNotification(data: RescheduleNotificationData): Promise<boolean> {
    try {
      console.log(`üîÑ Notification de report envoy√©e √† ${data.clientEmail}`);
      console.log(`üìÖ Ancien RDV: ${data.oldDate} √† ${data.oldTime}`);
      console.log(`üìÖ Nouveau RDV: ${data.newDate} √† ${data.newTime}`);
      
      return true;
    } catch (error) {
      console.error("Erreur notification report:", error);
      return false;
    }
  }
}

export const confirmationService = new ConfirmationService();