/**
 * Utilitaires pour g√©rer le cache des salons et √©viter la pollution crois√©e
 */

/**
 * Nettoie tout le cache li√© aux salons pour √©viter la pollution entre utilisateurs
 */
export function clearSalonCache(): void {
  // Nettoyage du sessionStorage
  sessionStorage.removeItem('salonSlug');
  sessionStorage.removeItem('publicSalonPayload');
  sessionStorage.removeItem('currentSalonSlug');
  
  // Nettoyage du localStorage (donn√©es de r√©servation)
  localStorage.removeItem('selectedService');
  localStorage.removeItem('selectedProfessional');
  
  console.log('üßπ Cache salon nettoy√© globalement');
}

/**
 * Nettoie sp√©cifiquement le cache avant de naviguer vers /salon
 * pour un utilisateur connect√©
 */
export function clearSalonCacheForAuthenticatedUser(): void {
  clearSalonCache();
  console.log('üßπ Cache salon nettoy√© pour utilisateur connect√© - navigation vers /salon');
}

/**
 * Nettoie le cache avant de naviguer vers un salon sp√©cifique
 * @param salonSlug - Le slug du salon vers lequel on navigue
 */
export function clearSalonCacheForNavigation(salonSlug?: string): void {
  clearSalonCache();
  
  // Si on navigue vers un salon sp√©cifique, on peut pr√©-remplir le cache
  if (salonSlug) {
    sessionStorage.setItem('salonSlug', salonSlug);
    console.log(`üßπ Cache salon nettoy√© et pr√©par√© pour ${salonSlug}`);
  }
}