üéØ Objectif : Stabiliser le d√©p√¥t existant (sans repartir de z√©ro), nettoyer les doublons, unifier la stack, verrouiller TS/ESLint, et ajouter des tests de fum√©e. 

‚öôÔ∏è Contexte :
- Le kit de stabilisation (tsconfig/eslint/prettier + exemples) est disponible localement.
- Stack retenue (√† d√©finir ici AVANT ex√©cution) : [REMPLACE PAR "SUPABASE/NEON/DRIZZLE" OU "FIREBASE"].

üìú R√àGLES STRICTES (NE PAS D√âVIER) :
1) TypeScript strict : utiliser `tsconfig.base.json` (strict, noImplicitAny, noUncheckedIndexedAccess, exactOptionalPropertyTypes, useUnknownInCatchVariables).
2) Interdit `// @ts-ignore` et `any` (ESLint doit bloquer).
3) ESLint/Prettier : appliquer `.eslintrc.cjs` et `.prettierrc`, corriger jusqu‚Äô√† **0 warning**.
4) Une seule stack backend : celle choisie plus haut. Supprimer l‚Äôautre stack (fichiers + d√©pendances).
5) Unifier les routes Express :
   - Monter UNIQUEMENT `server/routes/**` sous `/api/v1`.
   - Ne pas conserver deux syst√®mes (pas de double montage).
6) Front :
   - Conserver `client/src/App.tsx` et supprimer `client/src/App.optimized.tsx`.
   - Fusionner `BottomNavigation.tsx` et `BottomNavigationFloating.tsx` ‚Üí un seul composant avec prop `floating`.
7) R√©seau & erreurs :
   - Tous les `fetch` front ‚Üí try/catch + √©tat d‚Äôerreur UI explicite.
8) Validation d‚Äôentr√©e :
   - Zod obligatoire pour tous les POST/PATCH/PUT.
   - 400 si validation √©choue (r√©ponse JSON d√©terministe).
9) Secrets/env :
   - AUCUNE cl√© en dur.
   - Valider TOUTES les variables d‚Äôenv au d√©marrage.
   - C√¥t√© client : n‚Äôexposer que `VITE_*`.
10) Tests minima :
   - Supertest pour `/api/v1/bookings` (POST valide, POST invalide‚Üí400).
   - Vitest pour un hook/front critique si pr√©sent.

üßπ CHECKLIST DE NETTOYAGE (COMMANDES EXACTES) :
# 0) Checkpoint
git add -A && git commit -m "chore: checkpoint avant stabilisation" || true

# 1) Supprimer artefacts et copies
git rm -r -f --cached --ignore-unmatch Archive_2/tmp || true
git rm -r -f --cached --ignore-unmatch __MACOSX || true
git rm -f --cached --ignore-unmatch "Archive_3/salon-beaute-code-complet.zip" || true

# 2) Front ‚Äî supprimer doublons / fusion navigation
git rm -f --cached --ignore-unmatch client/src/App.optimized.tsx || true
git rm -f --cached --ignore-unmatch client/src/components/BottomNavigationFloating.tsx || true
# ‚Üí Conserver un seul composant : client/src/components/BottomNavigation.tsx (√† param√©trer avec prop `floating`)

# 3) Back ‚Äî unifier les routes
# Si pr√©sent, mettre de c√¥t√© l‚Äôancien point d‚Äôentr√©e de routes pour refactor :
[ -f server/routes.ts ] && git mv server/routes.ts server/routes/_legacy.ts || true
# Toutes les routes doivent vivre dans server/routes/*.ts et √™tre mont√©es sous /api/v1 dans server/index.ts

# 4) Choisir UNE stack et PURGER l‚Äôautre (d√©commente le bloc voulu)

## Option A ‚Äî Garder SUPABASE/NEON/DRIZZLE ‚Üí Purger Firebase + Replit Auth
# git rm -f --cached --ignore-unmatch server/firebaseAdmin.ts || true
# git rm -f --cached --ignore-unmatch server/firebaseSetup.ts || true
# git rm -f --cached --ignore-unmatch server/replitAuth.ts || true

## Option B ‚Äî Garder FIREBASE ‚Üí Purger Supabase/Neon/Drizzle
# git rm -f --cached --ignore-unmatch server/supabaseSetup.ts || true
# git rm -f --cached --ignore-unmatch server/db.ts || true
# git rm -f --cached --ignore-unmatch server/drizzle*.ts || true
# git rm -f --cached --ignore-unmatch server/neon*.ts || true

# 5) Secrets : v√©rifier qu‚Äôaucune cl√© n‚Äôest en dur
# (si des configs Firebase/Stripe/Supabase/Neon apparaissent en clair, les d√©placer en .env et valider au boot)

# 6) Appliquer les configs strictes (si le kit est d√©j√† copi√© √† la racine)
# Fichiers attendus √† la racine du repo :
# - tsconfig.base.json
# - .eslintrc.cjs
# - .prettierrc

# 7) Lancer lint & TS pour r√©v√©ler le vrai scope restant
npm run lint --silent || npx eslint . --max-warnings=0 || true
npx tsc -p tsconfig.base.json --noEmit || true
# Corriger jusqu‚Äô√† 0 warning & 0 erreur. Remplacer tout `any`/`@ts-ignore` par des types/guards.

# 8) Unifier les routes dans le style /api/v1 + middleware d‚Äôerreurs
# - server/index.ts : monter app.use('/api/v1', routerV1)
# - server/routes/v1.ts : regrouper les endpoints. Exemple :
#   routerV1.post('/bookings', validate(zodSchema), handler)
# - Ajouter un errorHandler (pino logger) et une route /health.

# 9) Validation Zod pour chaque POST/PATCH/PUT
# - Retourner 400 + JSON avec erreurs structur√©es si parsing √©choue.
# - Aucune logique m√©tier avant validation r√©ussie.

# 10) Front ‚Äî robustesse r√©seau
# - Chaque fetch ‚Üí try/catch, timeouts si possible, et √©tat UI "error".
# - Lire VITE_API_URL depuis import.meta.env

# 11) Tests de fum√©e
# - Back (Supertest):
#   - POST /api/v1/bookings ‚Üí 201 avec payload valide
#   - POST /api/v1/bookings ‚Üí 400 si payload invalide
# - Front (Vitest) :
#   - 1 test sur un hook/logic UI critique (ex. parser de r√©ponse API)

# 12) Build et scripts
# - S‚Äôassurer que `npm run build` (front+back) passe sans warnings.
# - S‚Äôassurer que `npm test` passe.
# - √âviter la coexistence ESM/CJS incoh√©rente (si "type": "module", adapter __dirname/__filename).

üõ†Ô∏è T√ÇCHES PR√âCISES √Ä FAIRE MAINTENANT (dans cet ordre) :
1. Ex√©cuter la checklist de nettoyage (sections 0‚Üí4) selon la stack choisie.
2. Copier/appliquer les configs strictes (`tsconfig.base.json`, `.eslintrc.cjs`, `.prettierrc`) si absentes.
3. Passer ESLint jusqu‚Äô√† 0 warning, puis `tsc --noEmit` jusqu‚Äô√† 0 erreur.
4. Unifier les routes sous `server/routes/**` et monter `/api/v1` dans `server/index.ts`. Ajouter `errorHandler` et `/health`.
5. Impl√©menter Zod sur tous les endpoints modificateurs (POST/PATCH/PUT).
6. C√¥t√© front, supprimer tout doublon, fusionner BottomNavigation, prot√©ger chaque `fetch`.
7. Ajouter les tests de fum√©e (Supertest + Vitest) et s‚Äôassurer qu‚Äôils passent.
8. Lancer un build complet, corriger toute alerte restante, puis commit.

‚úÖ CRIT√àRES D‚ÄôACCEPTATION (Definition of Done) :
- `eslint . --max-warnings=0` ‚Üí OK.
- `tsc -p tsconfig.base.json --noEmit` ‚Üí 0 erreur.
- `/api/v1` mont√© uniquement via `server/routes/**` + middleware d‚Äôerreurs op√©rationnel.
- Plus aucune r√©f√©rence √† la stack non retenue (fichiers et deps supprim√©s).
- Aucun secret en dur. Les variables d‚Äôenv sont valid√©es au boot.
- Tests de fum√©e (Supertest & Vitest) passent.
- Build front/back OK sans warnings bloquants.
